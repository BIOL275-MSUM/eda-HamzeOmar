latitude,
longitude,
categorie,
Observation_count,
observation_date
)
filter(
latitude,
longitude,
categorie,
Observation_count,
observation_date
)
filter(
longitude,
categorie,
Observation_count,
observation_date
)
ebird_data
ebird_data
ebird_data <- as_tibble(ebird_data)
ebird_data
ebird_data <- as_tibble(ebird_data)
View(ebird_data)
ebird_data
# eBird dataset -----------------------------------------------------------
# Install packages --------------------------------------------------------
remotes::install_github("CornellLabofOrnithology/auk")
install.packages("auk")
# load packages -----------------------------------------------------------
library(gridExtra)
library(lubridate)
library(psych)
library(tidyverse)
library(readr)
library(auk)
library(dplyr)
# read data ---------------------------------------------------------------
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
ebird_data
ebird_data <- as_tibble(ebird_data)
ebird_data <- as_tibble(read_ebd)
ebird_data
summary(ebird_data, activity)
count.fields(ebird_data, activity)
count.fields(ebird_data)
ggplot2::aes(data = ebird_data)
ggplot2::aes(data = ebird_data) + geom_bar(mapping = aes(x = activity))
library(gridExtra)
library(lubridate)
library(psych)
library(tidyverse)
library(readr)
library(auk)
library(dplyr)
ggplot(data = ebird_data) + geom_bar(mapping = aes(x = activity))
ggplot(data = ebird_data) + geom_bar(mapping = aes(x = ebird_data))
count(ebird_data, activity)
count(ebird_data, Sedge Wren)
ebird_data <-
ebird_taxonomy %>%
as_tibble() %>%
filter(category == "species")
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
ebird_data
summary(ebird_data, activity)
ebird_data <- as_tibble() %>%
filter(category == "species")
ebird_data <- as_tibble(ebird_data)
ebird_data
ggplot(data = ebird_data)
hour(x) + minute(x) / 60 + second(x) / 3600}
time_to_decimal <- function(x) {
x <- hms(x, quiet = TRUE)
hour(x) + minute(x) / 60 + second(x) / 3600}
time_to_decimal <- function(x) {
x <- hms(x, quiet = TRUE)
hour(x) + minute(x) / 60 + second(x) / 3600}
time_to_decimal <- function(x) {
x <- hms(x, quiet = TRUE)
hour(x) + minute(x) / 60 + second(x) / 3600}
# read data ---------------------------------------------------------------
dir.create("data", showWarnings = FALSE)
ebird_data <- ebird_data %>%
# convert X to NA
observation_count = if_else(observation_count == "X",
NA_character_, observation_count),
observation_count = as.integer(observation_count),
# effort_distance_km to 0 for non-travelling counts
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
# convert time to decimal hours since midnight
time_observations_started = time_to_decimal(time_observations_started),
# split date into year and day of year
year = year(observation_date),
day_of_year = yday(observation_date)
View(ebird_data)
ebird_data <- ebird_data %>%
mutate(
# convert X to NA
observation_count = if_else(observation_count == "X",
NA_character_, observation_count),
observation_count = as.integer(observation_count),
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
time_observations_started = time_to_decimal(time_observations_started),
year = year(observation_date),
day_of_year = yday(observation_date
))
ebird_data <- ebird_data %>%
mutate(
# convert X to NA
observation_count = if_else(observation_count == "X",
NA_character_, observation_count),
observation_count = as.integer(observation_count),
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
time_observations_started = time_to_decimal(time_observations_started),
year = year(observation_date),
day_of_year = yday(observation_date
))
ebird_data <- ebird_data %>%
mutate(
# convert X to NA
observation_count = (observation_count == "X",
NA_character_, observation_count),
observation_count = as.integer(observation_count),
effort_distance_km = (protocol_type != "Traveling",
0, effort_distance_km),
time_observations_started = time_to_decimal(time_observations_started),
year = year(observation_date),
day_of_year = yday(observation_date
))
ebird_data <- ebird_data %>%
# convert X to NA
observation_count = (observation_count == "X",
NA_character_, observation_count),
observation_count = as.integer(observation_count),
effort_distance_km = (protocol_type != "Traveling",
0, effort_distance_km),
time_observations_started = time_to_decimal(time_observations_started),
year = year(observation_date),
day_of_year = yday(observation_date
)
ebird_data <- ebird_data %>%
mutate(
# convert X to NA
observation_count = if_else(observation_count == "X",
NA_character_, observation_count),
observation_count = as.integer(observation_count),
# effort_distance_km to 0 for non-travelling counts
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
# convert time to decimal hours since midnight
time_observations_started = time_to_decimal(time_observations_started),
# split date into year and day of year
year = year(observation_date),
day_of_year = yday(observation_date)
)
ebird_data <- ebird_data %>%
mutate(
# convert X to NA
observation_count = if_else(observation_count == "X"),
NA_character_, observation_count),
observation_count = as.integer(observation_count),
# effort_distance_km to 0 for non-travelling counts
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
# convert time to decimal hours since midnight
time_observations_started = time_to_decimal(time_observations_started),
# split date into year and day of year
year = year(observation_date),
day_of_year = yday(observation_date)
# convert X to NA
observation_count == "X"),
NA_character_, observation_count),
observation_count = as.integer(observation_count),
# effort_distance_km to 0 for non-travelling counts
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
# convert time to decimal hours since midnight
time_observations_started = time_to_decimal(time_observations_started),
# split date into year and day of year
year = year(observation_date),
day_of_year = yday(observation_date)
# convert X to NA
observation_count == "X"),
NA_character_, observation_count),
observation_count = as.integer(observation_count),
# effort_distance_km to 0 for non-travelling counts
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
# convert time to decimal hours since midnight
time_observations_started = time_to_decimal(time_observations_started),
# split date into year and day of year
year = year(observation_date),
day_of_year = yday(observation_date)
ebird_data <- ebird_data %>%
mutate(
# convert X to NA
observation_count == "X"),
NA_character_, observation_count),
observation_count = as.integer(observation_count),
# effort_distance_km to 0 for non-travelling counts
effort_distance_km = if_else(protocol_type != "Traveling",
0, effort_distance_km),
# convert time to decimal hours since midnight
time_observations_started = time_to_decimal(time_observations_started),
# split date into year and day of year
year = year(observation_date),
day_of_year = yday(observation_date)
)
ebird_data <- auk_zerofill(f_in, f_out, collapse = TRUE)
auk_complete(ebird_data)
auk_complete()
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
auk_complete()
read_ebd()
# eBird dataset -----------------------------------------------------------
# Install packages --------------------------------------------------------
remotes::install_github("CornellLabofOrnithology/auk")
install.packages("auk")
# load packages -----------------------------------------------------------
library(gridExtra)
library(lubridate)
library(psych)
library(tidyverse)
library(readr)
library(auk)
library(dplyr)
# read data ---------------------------------------------------------------
dir.create("data", showWarnings = FALSE)
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
auk_complete()
read_ebd()
install.packages("auk")
dir.create("data", showWarnings = FALSE)
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
auk_complete()
dir.create("data", showWarnings = FALSE)
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
library(gridExtra)
library(lubridate)
library(psych)
library(tidyverse)
library(readr)
library(auk)
library(dplyr)
dir.create("data", showWarnings = FALSE)
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
auk_complete()
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
auk_clean(f_in, f_out, sep = "\t", remove_text = FALSE, overwrite = FALSE)
auk_clean(f_in, f_out, sep = "\t", remove_text = FALSE, overwrite = TRUE)
read_ebd %>%
dplyr::mutate(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
ggtitle("Full eBird dataset for the County of Constance")
read_ebd %>%
dplyr::mutate(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
ggtitle("Full eBird dataset for the County of Constance")
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "Mexico") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
read_ebd %>%
dplyr::mutate(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
read_ebd %>%
dplyr::mutate(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
ggtitle("Full eBird dataset for the County of Constance")
read_ebd %>%
dplyr::mutate(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
ggtitle("Full eBird dataset for the County of Constance")
read_ebd %>%
dplyr::summarise(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
ggtitle("Full eBird dataset for the County of Constance")
dim(ebird_data)
read_ebd %>%
dplyr::mutate(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
ggtitle("Full eBird dataset for the County of Constance")
read_ebd %>%
dplyr::mutate(year = lubridate::year(observation_date)) %>%
ggplot() +
geom_bar(aes(year))  +
hrbrthemes::theme_ipsum(
base_size = 12,
axis_title_size = 12,
axis_text_size = 12
) +
ylab("No. of eBird observations") +
xlab("Time (years)") +
ggtitle("Full eBird dataset for the County of Constance")
dim(ebird_data)
library("sf")
landkreis_konstanz <- osmdata::getbb("Landkreis Konstanz",
format_out = "sf_polygon")
plot(landkreis_konstanz)
glimpse(ebird_data)
ebird_data %>% filter(churn == "yes")
ebird_data %>% filter(observation_date == "yes")
ebird_data %>% filter(category == "yes")
ebird_data %>% filter(category == "TRUE")
ebird_data %>% filter(category == "TRUE") %>% select(latitude, longitude)
ebird_data %>% filter(category == "TRUE") %>% select(latitude, longitude, observation_date,
country, state, time_observations_started,
duration_minutes, effort_distance_km, effort_area_ha,
category, common_name, breeding_bird_atlas_category,
)
mutate(ebird_data)
View(ebird_data)
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "US") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
library(gridExtra)
library(lubridate)
library(psych)
library(tidyverse)
library(readr)
library(auk)
library(dplyr)
library(gridExtra)
library(lubridate)
library(psych)
library(tidyverse)
library(readr)
library(auk)
library(dplyr)
# read data ---------------------------------------------------------------
dir.create("data", showWarnings = FALSE)
f_in <- "Data/ebd_sedwre_relJan-2021/ebd_sedwre_relJan-2021.txt"
f_out <- "ebd_filtered_sedwre.txt"
ebird_data <- f_in %>%
auk_ebd() %>%
auk_species(species = "Sedge Wren") %>%
auk_country(country = "US") %>%
auk_filter(file = f_out, overwrite = TRUE) %>%
read_ebd()
View(ebird_data)
glimpse(ebird_data)
ebird_data
ebird_data <- as_tibble(ebird_data)
ebird_data
ebird_data %>% filter(category == "TRUE") %>% select(
latitude,
longitude,
observation_date,
country,
state,
time_observations_started,
duration_minutes,
effort_distance_km,
effort_area_ha,
category,
common_name,
breeding_bird_atlas_category,
)
mutate(ebird_data)
?R.version
?auk
?remote::
?remote
?install_github
?psych
?readr
?gridExtra
?remotes::install_github()
Citation()
Citation("dplyr")
citation("dplyr")
citation("lubridate")
Garrett Grolemund, Hadley Wickham (2011). Dates and Times Made Easy with lubridate.
Journal of Statistical Software, 40(3), 1-25. URL https://www.jstatsoft.org/v40/i03/.
citation("psych")
citation("psych")
citation("readr")
citation("gridExtra")
